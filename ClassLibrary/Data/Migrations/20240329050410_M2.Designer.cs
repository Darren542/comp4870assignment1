// <auto-generated />
using System;
using ClassLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassLibrary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240329050410_M2")]
    partial class M2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ClassLibrary.Models.Manifest", b =>
                {
                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TripId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManifestId", "MemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("TripId");

                    b.ToTable("Manifest", (string)null);

                    b.HasData(
                        new
                        {
                            ManifestId = 1,
                            MemberId = "2e6f7f27-c3d8-455d-bf8b-a69a38d1dfb8",
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2818),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2827),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Notes = "I'm driving",
                            TripId = 1
                        },
                        new
                        {
                            ManifestId = 2,
                            MemberId = "f348b447-7942-445a-85ad-22c3853643ec",
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2831),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2833),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Notes = "I'm driving",
                            TripId = 2
                        },
                        new
                        {
                            ManifestId = 3,
                            MemberId = "2e6f7f27-c3d8-455d-bf8b-a69a38d1dfb8",
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2836),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2837),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Notes = "I'm driving",
                            TripId = 3
                        },
                        new
                        {
                            ManifestId = 4,
                            MemberId = "2e6f7f27-c3d8-455d-bf8b-a69a38d1dfb8",
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2840),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2841),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Notes = "I'm driving",
                            TripId = 4
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f348b447-7942-445a-85ad-22c3853643ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504892c3-270b-45b3-baad-6accfa75c64a",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "b@b.b",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            LastName = "User1",
                            LockoutEnabled = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "B@B.B",
                            NormalizedUserName = "B@B.B",
                            PasswordHash = "AQAAAAIAAYagAAAAEO8N/s6rekNVPeuDzkzvqbuZcjDzpUL9f5ha/VHWxcAc3MbIqF6fIhjgYDtUnv4SGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3064ae3c-6d4a-479b-9321-1b76e7ee3723",
                            TwoFactorEnabled = false,
                            UserName = "b@b.b"
                        },
                        new
                        {
                            Id = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52f2e3c5-0dfc-4a18-be81-8325ed000ff0",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "c@c.c",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            LastName = "Owner",
                            LockoutEnabled = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "C@C.C",
                            NormalizedUserName = "C@C.C",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7BbOTL0tW8Yi3i6b0TntAVSspPAajQbCZudNEBAf87PM276MS0qTUHJWdapFtI1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eec16ab4-47fe-4516-b7a3-5c6b99632709",
                            TwoFactorEnabled = false,
                            UserName = "c@c.c"
                        },
                        new
                        {
                            Id = "2e6f7f27-c3d8-455d-bf8b-a69a38d1dfb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b61571ea-f8a5-4877-8877-d010b7877f4c",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "d@d.d",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            LastName = "Passenger",
                            LockoutEnabled = false,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "D@D.D",
                            NormalizedUserName = "D@D.D",
                            PasswordHash = "AQAAAAIAAYagAAAAEDI/PeodylQZ2FDDgVglNlkfSPAqI9RVJOpUtM8y7N8XAR9248T9MtOaPqzdSSppHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fab5bb19-42aa-404c-b24f-b47db8b47855",
                            TwoFactorEnabled = false,
                            UserName = "d@d.d"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetingAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TripId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Trip", (string)null);

                    b.HasData(
                        new
                        {
                            TripId = 1,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2745),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Date = new DateOnly(2024, 3, 10),
                            DestinationAddress = "123 Main St, Anytown, USA",
                            MeetingAddress = "456 Elm St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2748),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Time = new TimeOnly(12, 0, 0),
                            VehicleId = 1
                        },
                        new
                        {
                            TripId = 2,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2752),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Date = new DateOnly(2024, 4, 12),
                            DestinationAddress = "321 Knight St, Anytown, USA",
                            MeetingAddress = "789 Cambie St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2754),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Time = new TimeOnly(14, 30, 0),
                            VehicleId = 2
                        },
                        new
                        {
                            TripId = 3,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2759),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Date = new DateOnly(2024, 4, 13),
                            DestinationAddress = "8 Moody St, Anyville, USA",
                            MeetingAddress = "99 Hastings St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2760),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Time = new TimeOnly(8, 0, 0),
                            VehicleId = 3
                        },
                        new
                        {
                            TripId = 4,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2765),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Date = new DateOnly(2022, 4, 13),
                            DestinationAddress = "8 Moody St, Anyville, USA",
                            MeetingAddress = "99 Hastings St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2766),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Time = new TimeOnly(8, 0, 0),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfSeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleId");

                    b.HasIndex("MemberId");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2559),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Make = "Tesla",
                            MemberId = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Model = "Model 3",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2616),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            NumberOfSeats = 5,
                            VehicleType = "Electric",
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 2,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2622),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Make = "Tesla",
                            MemberId = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Model = "Model S",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2624),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            NumberOfSeats = 5,
                            VehicleType = "Electric",
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 3,
                            Created = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2627),
                            CreatedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Make = "Tesla",
                            MemberId = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            Model = "Model X",
                            Modified = new DateTime(2024, 3, 28, 22, 4, 10, 94, DateTimeKind.Local).AddTicks(2677),
                            ModifiedBy = "feaf4c36-6f0a-4354-85f6-da8b3e881502",
                            NumberOfSeats = 5,
                            VehicleType = "Electric",
                            Year = 2021
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Manifest", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("ClassLibrary.Models.Trip", b =>
                {
                    b.HasOne("ClassLibrary.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ClassLibrary.Models.Vehicle", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
