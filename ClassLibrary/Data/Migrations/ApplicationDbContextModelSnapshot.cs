// <auto-generated />
using System;
using ClassLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassLibrary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ClassLibrary.Models.Manifest", b =>
                {
                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("TripId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManifestId", "MemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TripId", "VehicleId")
                        .IsUnique();

                    b.ToTable("Manifest", (string)null);

                    b.HasData(
                        new
                        {
                            ManifestId = 1,
                            MemberId = "36204d2a-d455-4eaf-9613-46826bba2a3b",
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5381),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5384),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Notes = "I'm driving",
                            TripId = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            ManifestId = 2,
                            MemberId = "f824f67c-1b68-4c00-b8b8-289de93f2d79",
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5388),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5389),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Notes = "I'm driving",
                            TripId = 2,
                            VehicleId = 2
                        },
                        new
                        {
                            ManifestId = 3,
                            MemberId = "36204d2a-d455-4eaf-9613-46826bba2a3b",
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5392),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5393),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Notes = "I'm driving",
                            TripId = 3,
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetingAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("TripId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Trip", (string)null);

                    b.HasData(
                        new
                        {
                            TripId = 1,
                            VehicleId = 1,
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5340),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Date = new DateOnly(2021, 12, 25),
                            DestinationAddress = "123 Main St, Anytown, USA",
                            MeetingAddress = "456 Elm St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5342),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Time = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            TripId = 2,
                            VehicleId = 2,
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5346),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Date = new DateOnly(2022, 1, 12),
                            DestinationAddress = "321 Knight St, Anytown, USA",
                            MeetingAddress = "789 Cambie St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5348),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Time = new TimeOnly(14, 30, 0)
                        },
                        new
                        {
                            TripId = 3,
                            VehicleId = 3,
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5351),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Date = new DateOnly(2022, 1, 24),
                            DestinationAddress = "8 Moody St, Anyville, USA",
                            MeetingAddress = "99 Hastings St, Anytown, USA",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5352),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Time = new TimeOnly(8, 0, 0)
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfSeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleId");

                    b.HasIndex("Id");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5224),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Make = "Tesla",
                            MemberId = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Model = "Model 3",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5283),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            NumberOfSeats = 5,
                            VehicleType = "Electric",
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 2,
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5289),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Make = "Tesla",
                            MemberId = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Model = "Model S",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5290),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            NumberOfSeats = 5,
                            VehicleType = "Electric",
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 3,
                            Created = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5293),
                            CreatedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Make = "Tesla",
                            MemberId = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            Model = "Model X",
                            Modified = new DateTime(2024, 3, 3, 17, 12, 18, 574, DateTimeKind.Local).AddTicks(5294),
                            ModifiedBy = "ffc343dc-373e-42d6-9460-4a8c2c8b8275",
                            NumberOfSeats = 5,
                            VehicleType = "Electric",
                            Year = 2021
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Manifest", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Trip", "Trip")
                        .WithOne()
                        .HasForeignKey("ClassLibrary.Models.Manifest", "TripId", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ClassLibrary.Models.Trip", b =>
                {
                    b.HasOne("ClassLibrary.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ClassLibrary.Models.Vehicle", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClassLibrary.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
