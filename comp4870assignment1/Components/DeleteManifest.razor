@page "/manifest/deletePage"
@rendermode InteractiveServer
@using ClassLibrary.Models
@inject ApplicationDbContext _context
@inject ManifestService _manifestService
@inject NavigationManager _navigationManager

<PageTitle>Edit Vehicle</PageTitle>

@if (manifest == null)
{
    <p>Loading...</p>
}
else
{
    <h1>Delete</h1>

    <h3>Are you sure you want to delete this?</h3>
    <div>
        <h4>Manifest</h4>
        <hr />
        <dl class="row">
            <dt class = "col-sm-2">
                Member ID
            </dt>
            <dd class = "col-sm-10">
                @manifest.MemberId
            </dd>
            <dt class = "col-sm-2">
                Trip ID
            </dt>
            <dd class = "col-sm-10">
                @manifest.TripId
            </dd>
            <dt class = "col-sm-2">
                Notes
            </dt>
            <dd class = "col-sm-10">
                @manifest.Notes
            </dd>
            <dt class = "col-sm-2">
                Date Created
            </dt>
            <dd class = "col-sm-10">
                @manifest.Created
            </dd>
            <dt class = "col-sm-2">
                Date Modified
            </dt>
            <dd class = "col-sm-10">
                @manifest.Modified
            </dd>
            <dt class = "col-sm-2">
                Created By
            </dt>
            <dd class = "col-sm-10">
                @manifest.CreatedBy
            </dd>
            <dt class = "col-sm-2">
                Modified By
            </dt>
            <dd class = "col-sm-10">
                @manifest.ModifiedBy
            </dd>
        </dl>
    
        <EditForm Model="@manifest" OnValidSubmit="HandleValidSubmit">
            <input type="hidden" @bind="manifest.ManifestId" />
            <input type="hidden" @bind="manifest.MemberId" />
            <button type="submit" class="btn btn-danger">Delete</button>
            <a href="/Manifests" class="btn btn-secondary">Back to List</a>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int ManifestId { get; set; }

    [Parameter]
    public string MemberId { get; set; } = "";

    private Manifest manifest = new Manifest();

    private async Task HandleValidSubmit()
    {
        await _manifestService.DeleteManifestAsync(manifest.ManifestId, manifest.MemberId!);
        _navigationManager.NavigateTo("/Manifests");
    }

    protected override async Task OnInitializedAsync()
    {
        manifest = (await _manifestService.GetManifestAsync(ManifestId, MemberId))!;
        if(manifest == null)
        {
            manifest = new Manifest();
        }
    }
}
