@page "/member/delete/{Id}"
@using ClassLibrary.Models
@inject MemberService _memberService
@inject NavigationManager _navigationManager

<PageTitle>Delete Member</PageTitle>

@if (member == null)
{
    <p>Loading...</p>
}
else
{
    <h1>Delete</h1>

    <h3>Are you sure you want to delete this?</h3>
    <div>
        <h4>Member</h4>
        <hr />
        <dl class="row">
            @* Display member details *@
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@member.FirstName</dd>
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@member.LastName</dd>
            @* Continue with other fields in a similar fashion *@
        </dl>
    
        <EditForm Model="@member" OnValidSubmit="HandleValidSubmit">
            <input type="hidden" @bind="member.Id" />
            <button type="submit" class="btn btn-danger">Delete</button>
            <a href="/Members" class="btn btn-secondary">Back to List</a>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Member member = new Member();

    protected override async Task OnInitializedAsync()
    {
        member = await _memberService.GetMemberAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        if (member != null)
        {
            await _memberService.DeleteMemberAsync(member.Id);
            _navigationManager.NavigateTo("/members");
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/members");
    }
}
