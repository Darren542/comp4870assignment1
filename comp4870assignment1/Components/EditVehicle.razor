@page "/vehicle-edit"
@using ClassLibrary.Models
@inject ApplicationDbContext _context

<PageTitle>Edit Vehicle</PageTitle>

@if (vehicle == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@vehicle" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input type="hidden" bind="@vehicle.VehicleId" />

        <div class="form-group">
            <label for="Model">Model</label>
            <InputText id="Model" @bind-Value="vehicle.Model" class="form-control" />
            <ValidationMessage For="@(() => vehicle.Model)" />
        </div>

        <div class="form-group">
            <label for="Make">Make</label>
            <InputText id="Make" @bind-Value="vehicle.Make" class="form-control" />
            <ValidationMessage For="@(() => vehicle.Make)" />
        </div>

        <div class="form-group">
            <label for="Year">Year</label>
            <InputNumber id="Year" @bind-Value="vehicle.Year" class="form-control" />
            <ValidationMessage For="@(() => vehicle.Year)" />
        </div>

        <div class="form-group">
            <label for="NumberOfSeats">Number of Seats</label>
            <InputNumber id="NumberOfSeats" @bind-Value="vehicle.NumberOfSeats" class="form-control" />
            <ValidationMessage For="@(() => vehicle.NumberOfSeats)" />
        </div>

        <div class="form-group">
            <label for="VehicleType">Vehicle Type</label>
            <InputText id="VehicleType" @bind-Value="vehicle.VehicleType" class="form-control" />
            <ValidationMessage For="@(() => vehicle.VehicleType)" />
        </div>

        <div class="form-group">
            <label for="MemberId">Member ID</label>
            <InputText id="MemberId" @bind-Value="vehicle.MemberId" class="form-control" />
            <ValidationMessage For="@(() => vehicle.MemberId)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>

    <a href="/vehicles" class="btn btn-secondary">Back to List</a>
}

@code {
    [Parameter]
    public int VehicleId { get; set; }

    private Vehicle vehicle;

    protected override async Task OnInitializedAsync()
    {
        vehicle = await _context.Vehicles.FindAsync(VehicleId);
    }

    private async Task HandleValidSubmit()
    {
        _context.Vehicles.Update(vehicle);
        await _context.SaveChangesAsync();
    }
}
