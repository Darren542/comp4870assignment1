@page "/vehicles/createPage"
@using ClassLibrary.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@inject NavigationManager NavigationManager

<EditForm Model="@vehicle" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" bind="@vehicle.VehicleId" />

    <div class="form-group">
        <label for="Model">Model</label>
        <InputText id="Model" @bind-Value="vehicle.Model" class="form-control" />
        <ValidationMessage For="@(() => vehicle.Model)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="Make">Make</label>
        <InputText id="Make" @bind-Value="vehicle.Make" class="form-control" />
        <ValidationMessage For="@(() => vehicle.Make)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="Year">Year</label>
        <InputNumber id="Year" @bind-Value="vehicle.Year" class="form-control" />
        <ValidationMessage For="@(() => vehicle.Year)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="NumberOfSeats">Number of Seats</label>
        <InputNumber id="NumberOfSeats" @bind-Value="vehicle.NumberOfSeats" class="form-control" />
        <ValidationMessage For="@(() => vehicle.NumberOfSeats)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="VehicleType">Vehicle Type</label>
        <InputText id="VehicleType" @bind-Value="vehicle.VehicleType" class="form-control" />
        <ValidationMessage For="@(() => vehicle.VehicleType)" class="text-danger" />
    </div>

    <div class="form-group">
        <label for="MemberId">Vehicle Owner</label>
        <InputSelect id="MemberId" @bind-Value="vehicle.MemberId" class="form-control">
            @foreach (var member in members)
            {
                <option value="@member.Id">@member.FirstName @member.LastName [@member.Email]</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => vehicle.MemberId)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@* <div>
    <button class="btn btn-secondary" @onclick="() => NavigationManager.NavigateTo("/vehicles")">Back to List</button>
</div> *@

@code {
    private Vehicle vehicle = new Vehicle();
    private List<Member> members = new List<Member>();
    protected override async Task OnInitializedAsync()
    {
        members = await _context.Members.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        _context.Vehicles.Add(vehicle);
        await _context.SaveChangesAsync();
    }
}
